// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"hello-wire/handler"
	"hello-wire/logger"
	"hello-wire/model"
	"hello-wire/service"
	"hello-wire/store"
	"log"
)

// Injectors from main.go:

func initMailHandler() (*handler.MailHandler, error) {
	goLogger := logger.ProvideLogger()
	accountStore := store.ProvideAccountStore()
	mailStore := store.ProvideMailStore()
	mailService := service.ProvideMailService(goLogger, accountStore, mailStore)
	mailHandler := handler.ProvideMailHandler(mailService)
	return mailHandler, nil
}

func initMailHandlerMocked(mailStore service.MailStore) (*handler.MailHandler, error) {
	goLogger := logger.ProvideLogger()
	accountStore := store.ProvideAccountStore()
	mailService := service.ProvideMailService(goLogger, accountStore, mailStore)
	mailHandler := handler.ProvideMailHandler(mailService)
	return mailHandler, nil
}

// main.go:

func main() {
	mailHandler, err := initMailHandler()
	if err != nil {
		log.Fatal(err)
	}

	mails, err := mailHandler.GetAll()
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("mails: %+v\n", mails)

	mailHandlerMocked, err := initMailHandlerMocked(NewMailStoreMock())
	mails, err = mailHandlerMocked.GetAll()
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("mocked mails: %+v\n", mails)
}

type MailStoreMock struct{}

func (m *MailStoreMock) GetAll() ([]model.Mail, error) {
	return []model.Mail{}, nil
}

func NewMailStoreMock() service.MailStore {
	return &MailStoreMock{}
}
